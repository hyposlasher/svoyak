{"version":3,"sources":["components/gamers-table.js","App.js","serviceWorker.js","index.js"],"names":["GamersTable","gamers","onDeleteGamer","onAddPoints","onChangePoints","Table","hover","map","gamer","index","key","Button","variant","onClick","name","points","App","useState","setGamers","gamerName","setGamerName","bet","setBet","getBetVariant","buttonBet","Container","Row","className","Col","xs","Form","Group","Control","type","value","onChange","e","target","ButtonGroup","aria-label","op","newGamersState","sort","gamer1","gamer2","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c34b440.chunk.js","sourcesContent":["import React from 'react';\nimport {Table, Button} from 'react-bootstrap';\n\nexport const GamersTable = ({gamers, onAddPoints, onDeleteGamer, onChangePoints}) => (\n  <Table hover >\n    <thead>\n      <tr>\n        <th></th>\n        <th>#</th>\n        <th>Игрок</th>\n        <th>Баллы</th>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>\n      {gamers.map((gamer, index) => (\n        <tr key={index}>\n          <td><Button variant=\"danger\" onClick={() => onDeleteGamer(gamer.name)}>x</Button></td>\n          <td>{index + 1}</td>\n          <td>{gamer.name}</td>\n          <td>{gamer.points}</td>\n          <td>\n            <Button onClick={() => onChangePoints(gamer.name, 'add')} variant=\"success\">+</Button>{' '}\n            <Button onClick={() => onChangePoints(gamer.name, 'sub')} variant=\"danger\">-</Button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </Table>\n)","import React, {useState} from 'react';\nimport {Container, Row, Col, Button, Form, ButtonGroup} from 'react-bootstrap';\nimport {GamersTable} from './components/gamers-table';\n\nfunction App() {\n  const [gamers, setGamers] = useState([])\n  const [gamerName, setGamerName] = useState('');\n  const [bet, setBet] = useState(10);\n\n  const handleAddGamer = () => {\n    setGamers([\n      ...gamers,\n      {\n        name: gamerName,\n        points: 0\n      }\n    ])\n    setGamerName('')\n  }\n\n  const handleChangeName = (e) => {\n    setGamerName(e.target.value)\n  }\n\n  const getBetVariant = (buttonBet) => {\n    return bet === buttonBet ? \"secondary\" : 'light'\n  }\n\n  const changePoints = (name, op) => {\n    if (!bet) {\n      return \n    }\n    const newGamersState = gamers\n      .map(gamer => {\n        if (gamer.name === name) {\n          return {\n            ...gamer,\n            points: op === 'add' ? gamer.points + bet : gamer.points - bet\n          }\n        }\n        return gamer\n      })\n      .sort((gamer1, gamer2) => gamer2.points - gamer1.points)\n\n      setGamers(newGamersState)\n  }\n\n  const handleDeleteGamer = (name) => {\n    const newGamersState = gamers.filter(gamer => gamer.name !== name)\n    setGamers(newGamersState)\n  }\n\n  return (\n    <Container>\n      <Row className=\"mt-3\">\n        <Col xs={3}>\n          <Form.Group>\n            <Form.Control\n              type=\"text\"\n              value={gamerName}\n              onChange={handleChangeName}\n            />\n          </Form.Group>\n        </Col>\n        <Col>\n          <Button variant=\"primary\" onClick={handleAddGamer}>\n            Добавить\n          </Button>\n        </Col>\n        <Col>\n          <ButtonGroup aria-label=\"Basic example\" className=\"float-right\">\n            <Button variant={getBetVariant(10)} onClick={() => setBet(10)}>10</Button>\n            <Button variant={getBetVariant(20)} onClick={() => setBet(20)}>20</Button>\n            <Button variant={getBetVariant(30)} onClick={() => setBet(30)}>30</Button>\n            <Button variant={getBetVariant(40)} onClick={() => setBet(40)}>40</Button>\n            <Button variant={getBetVariant(50)} onClick={() => setBet(50)}>50</Button>\n          </ButtonGroup>\n        </Col>\n      </Row>\n      <Row className=\"mt-3\">\n        <Col>\n          <GamersTable \n            gamers={gamers}\n            onChangePoints={changePoints}\n            onDeleteGamer={handleDeleteGamer}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}